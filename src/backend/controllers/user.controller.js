import UserModel from "../models/user.model.js";
import CustomerModel from "../models/customer.model.js";
import DiscountModel from "../models/discount.model.js";

const userController = {
  getProfile: async (req, res) => {
    try {
      // L·∫•y userId t·ª´ middleware x√°c th·ª±c
      const userId = req.userId;
      if (!userId) {
        return res.status(401).json({ msg: "Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng, vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i" });
      }

      const user = await UserModel.findById(userId).select("-password");
      if (!user)
        return res.status(404).json({ msg: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" });

      let profile = {
        id: user._id,
        email: user.email,
        isVerified: user.isVerified,
        role: user.role,
        createdAt: user.createdAt,
        updatedAt: user.updatedAt,
        avatar: user.avatar,
        phone: user.phone,
      };

      if (user.role === "customer") {
        const customer = await CustomerModel.findById(user._id);
        if (customer) {
          profile.fullname = customer.fullname || "";
          profile.addresses = customer.addresses || [];
          profile.loyaltyPoints = customer.loyaltyPoints || 0;
        } else {
          profile.fullname = "";
          profile.addresses = [];
          profile.loyaltyPoints = 0;
        }
      }

      if (user.role === "admin") {
        const admin = await AdminModel.findById(user._id).populate("shopId");
        if (admin) {
          profile.username = admin.username;
          profile.shop = admin.shopId ? admin.shopId.name : null;
        }
      } else if (user.role === "superAdmin") {
        profile.username = "The coffee house";
      }

      res.json(profile);
    } catch (error) {
      console.error("L·ªói getProfile:", error);
      res.status(500).json({ msg: "L·ªói server", error: error.message });
    }
  },

  updateCustomerProfile: async (req, res) => {
    try {
      // L·∫•y userId t·ª´ middleware x√°c th·ª±c
      const userId = req.userId;
      if (!userId) {
        return res.status(401).json({
          success: false,
          message: "Unauthorized: User not authenticated.",
        });
      }

      const user = await UserModel.findById(userId).select("-password");
      if (!user) {
        return res.status(404).json({
          success: false,
          message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng",
        });
      }

      // Ch·ªâ cho ph√©p user c√≥ role l√† customer c·∫≠p nh·∫≠t profile
      if (user.role !== "customer") {
        return res.status(403).json({
          success: false,
          message: "Ch·ªâ kh√°ch h√†ng m·ªõi c√≥ th·ªÉ c·∫≠p nh·∫≠t profile n√†y",
        });
      }

      const { fullname, email, phone, addresses } = req.body;

      // C·∫≠p nh·∫≠t th√¥ng tin trong UserModel
      if (email) user.email = email;
      if (phone) user.phone = phone;
      await user.save();

      // C·∫≠p nh·∫≠t th√¥ng tin trong CustomerModel
      let customer = await CustomerModel.findById(user._id);

      if (fullname) customer.fullname = fullname;
      if (addresses) {
        customer.addresses = addresses;
        customer.markModified("addresses"); // ƒê√°nh d·∫•u thay ƒë·ªïi ƒë·ªÉ MongoDB l∆∞u
      }
      const savedCustomer = await customer.save();
      if (!savedCustomer) {
        throw new Error("Kh√¥ng th·ªÉ l∆∞u ƒë·ªãa ch·ªâ v√†o database");
      }
      console.log("üíæ Customer sau khi l∆∞u:", savedCustomer);

      return res.status(200).json({
        success: true,
        message: "Profile updated successfully.",
        data: { fullname, email, phone, addresses },
      });
    } catch (error) {
      console.error("L·ªói updateCustomerProfile:", error);
      return res.status(500).json({
        success: false,
        message: "L·ªói server",
        error: error.message,
      });
    }
  },
  redeemPoints: async (req, res) => {
    try {
      const { pointsToRedeem } = req.body;

      // L·∫•y userId t·ª´ middleware x√°c th·ª±c
      const userId = req.userId;
      if (!userId) {
        return res.status(401).json({ 
          success: false, 
          message: "Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng, vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i" 
        });
      }

      // L·∫•y th√¥ng tin ng∆∞·ªùi d√πng
      const user = await UserModel.findById(userId).select("-password");
      if (!user)
        return res
          .status(404)
          .json({ success: false, message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" });

      // Ki·ªÉm tra role l√† customer
      if (user.role !== "customer") {
        return res.status(403).json({
          success: false,
          message: "Ch·ªâ kh√°ch h√†ng m·ªõi c√≥ th·ªÉ ƒë·ªïi ƒëi·ªÉm",
        });
      }

      // L·∫•y th√¥ng tin kh√°ch h√†ng
      const customer = await CustomerModel.findById(user._id);
      if (!customer)
        return res.status(404).json({
          success: false,
          message: "Kh√¥ng t√¨m th·∫•y th√¥ng tin kh√°ch h√†ng",
        });

      // Ki·ªÉm tra ƒëi·ªÉm t√≠ch l≈©y
      if (customer.loyaltyPoints < pointsToRedeem) {
        return res.status(400).json({ 
          success: false, 
          message: "Kh√¥ng ƒë·ªß ƒëi·ªÉm ƒë·ªÉ ƒë·ªïi" 
        });
      }

      // Tr·ª´ ƒëi·ªÉm
      customer.loyaltyPoints -= pointsToRedeem;
      await customer.save();

      // T·∫°o m√£ gi·∫£m gi√°
      const discountCode = `DISCOUNT-${Date.now()}`;
      const discountAmount = pointsToRedeem * 100;
      const expiryDate = new Date();
      expiryDate.setDate(expiryDate.getDate() + 30);

      const discount = new DiscountModel({
        code: discountCode,
        description: `Gi·∫£m ${discountAmount.toLocaleString()}ƒë cho ƒë∆°n t·ª´ 0ƒë`,
        isPercentage: false,
        discountAmount,
        expiryDate,
        isActive: true,
        userId: user._id, // G√°n userId cho voucher
        icon: "https://minio.thecoffeehouse.com/image/admin/1709222265_deli-copy-7.jpg",
      });

      await discount.save();

      return res.status(200).json({
        success: true,
        message: "ƒê·ªïi ƒëi·ªÉm th√†nh c√¥ng",
        data: {
          discountCode: discount.code,
          discountAmount: discount.discountAmount,
          expiryDate: discount.expiryDate,
        },
      });
    } catch (error) {
      console.error("L·ªói redeemPoints:", error);
      return res.status(500).json({ 
        success: false, 
        message: "L·ªói server", 
        error: error.message 
      });
    }
  },
};

export default userController;
